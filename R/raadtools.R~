#' R tools for spatial data at the AAD
#'
#' Tools in R for reading, plotting and manipulating spatial data
#' commonly used at the Australian Antarctic Division (AAD).
#' @author
#' Michael D. Sumner \email{michael.sumner@@aad.gov.au}
#'
#' Maintainer: Michael D. Sumner \email{michael.sumner@@aad.gov.au}
#'
#' @name raadtools
#' @docType package
#' @keywords package
NULL

## TODO: must fix how this works
options(default.datadir = '//aad.gov.au/files/AADC/Scientific_Data/Data/gridded/data',
datapath = "\\\\aad.gov.au/files/Transfer/toolbox/data",
cachepath = "\\\\aad.gov.au\\files\\Transfer\\toolbox\\datacache")


##' .. content for \description{} (no empty lines) ..
##'
##' This function loads the latest cache of stored NSIDC files for
##' either daily or monthly data for the Southern Hemisphere,
##' processing by the SMMR/SSMI NASA Team.
##' @template read
##' @export
##' @examples
##' icf <- icefiles(time.resolution = "monthly")
##' icf[which.min((as.Date("1995-01-01") + runif(1, -4000, 4000)) - as.Date(icf$date), ]
##' @return data.frame of \code{file} and \code{date}
icefiles <- function(time.resolution = c("daily", "monthly")) {
    time.resolution <- match.arg(time.resolution)
    ## check to see if someone saved the file list recently
    ##icyf <- getOption("icyfiles")
    ##if (!is.null(icyf)) {
    ##    checktime <- attr(icyf, "timedate")
    ##    if (time.resolution == attr(icyf, "time.resolution")) {
    ##        dtime <- Sys.time() - checktime
            ## if it's recent, return the saved object, otherwise proceed
    ##        if (unclass(dtime) < (2 * 24 * 3600)) return(icyf)
    ##    }
    ##}
    load(file.path(getOption("cachepath"), sprintf("%s_icefiles.Rdata", time.resolution)))
    files
}

.updateicefiles <- function(datadir = getOption("default.datadir")) {


    for (time.resolution in c("daily", "monthly")) {
        subpath <- file.path("seaice", "smmr_ssmi_nasateam", time.resolution)
        fs <- list.files(file.path(datadir, subpath) , recursive = TRUE, pattern = "s.bin$", full.names = FALSE)

        datepart <- sapply(strsplit(basename(fs), "_"), "[", 2)
        if(time.resolution == "monthly") datepart <- paste0(datepart, "01")

        icdates <- as.POSIXct(strptime(datepart, "%Y%m%d"), tz = "GMT")

        files <- data.frame(file = file.path(subpath, fs), date = icdates, stringsAsFactors = FALSE)

        ## take the "last" duplicated   (should be lexicographically f0n > f0m)
        bad <- rev(duplicated(rev(icdates)))

        files <- files[!bad, ]
        files <- files[order(files$date), ]
        ##attr(files, "timedate") <- Sys.time()
        ##attr(files, "time.resolution") <- time.resolution
        ##options(icyfiles = files)
        fpath <- file.path(getOption("cachepath"), sprintf("%s_icefiles.Rdata", time.resolution))
        save(files, file = fpath)
        print(sprintf("saved %s", fpath))
    }

}


##' Read NSIDC sea ice data from daily or monthly files
##'
##' Sea ice data is read from files managed by \code{\link{icefiles}}
##'
##' @param date
##' @param raster
##' @param time.resolution
##' @param zeroNA
##' @param rescale
##' @param datadir
##' @return
##' @author
readice <- function(date = as.Date("1978-11-01"), raster = TRUE, time.resolution = "daily", zeroNA = TRUE, rescale = TRUE, datadir = getOption("default.datadir")) {
    date <- timedateFrom(date)
    if (raster) require(raster)
    stersouth <-  commonprojections[["polar"]]
    #if (date > timedateFrom("2011-12-31") & date < timedateFrom("2013-01-01") & time.resolution == "monthly") {
    #    ## special case for 2012
    #    warning("This function is running a special case for the 2012 data (NOT AN ERROR, JUST LETTING YOU KNOW)")
    #    load("\\\\aad.gov.au\\files\\Transfer\\Michael Sumner\\seaice\\ice2012_monthly.Rdata")
    #    imonth <- as.numeric(format(date, "%m"))
    #    if (raster) return(ice2012[[imonth]]) else return(as(ice2012, "SpatialGridDataFrame"))

    #}
    dims <- c(316, 332)
    ## actual topology of the ice data in Polar Stereographic
    ##gt <- GridTopology(c(-3937501, -3937501), c(25000, 25000), c(316, 332))
    icyf <- icefiles(time.resolution = time.resolution)

    windex <- which.min(abs(date - icyf$date)) ##findInterval(date, icyf$date)
    ##print(windex)
    ##windex <- max(c(1, windex))
    ##windex <- min(c(windex, nrow(icyf)))

    ##if (windex < 1 | windex > nrow(icyf)) stop(sprintf("cannot find ice data file including time %s", format(date)))
    dtime <- abs(difftime(date, icyf$date[windex], units = c("days")))
    if (time.resolution == "daily") {

        if (dtime > 1.5) stop(sprintf("no ice data file within 1.5 days of %s", format(date)))
    }
     if (time.resolution == "monthly") {
        if (dtime > 15) stop(sprintf("no ice data file within 15 days of %s", format(date)))
    }


    con <- file(file.path(datadir, icyf$file[windex]), open = "rb")
    trash <- readBin(con, "integer", size = 1, n = 300)
    dat <- readBin(con, "integer", size = 1, n = prod(dims), endian = "little", signed = FALSE)
    close(con)

    r100 <- dat > 250
    r0 <- dat < 1
    if (rescale) {
        dat <- dat/2.5  ## rescale back to 100
    }
     if (zeroNA) {
        dat[r100] <- NA
        dat[r0] <- NA
    }
     r <- raster(t(matrix(dat, dims[1])), template = raster(GridTopology(c(-3937501, -3937501), c(25000, 25000), dims)))
    projection(r) <- stersouth
    r <- setZ(r, icyf$date[windex])
    r
}
