\documentclass{article}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\usepackage{url}

\usepackage[unicode=true,pdfusetitle,bookmarks=true,bookmarksnumbered=true,
bookmarksopen=true,bookmarksopenlevel=2,breaklinks=false,pdfborder={0 0 1},
backref=false,colorlinks=true,urlcolor=blue]{hyperref}


\hypersetup{pdfstartview={XYZ null null 1}}
\usepackage{breakurl}

%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{Using the raadtools package}

\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
# set global chunk options
opts_chunk$set(fig.path='figure/minimal-', fig.align='center', fig.show='hold', cache = TRUE)
options(replace.assign=TRUE,width=90)
@


\title{Using the {\tt raadtools} package}

\author{Michael D. Sumner\footnote{Australian Antarctic Division, 203
    Channel Highway, Kingston, Tasmania 7050, Australia. {\tt michael.sumner@aad.gov.au}}}

\maketitle
\tableofcontents

\section{Introduction}
\label{sec:introduction}
This document introduces the \textbf{raadtools} package. Some
familiarity with \textbf{R} and the \textbf{raster} package is
assumed.

There are some requirements for tasks that require reading data from a
local file system, so please contact the author/s if you need
assistance.

The very first step is to load the package, and if the required data
repository is not found it will provide a message on what must be
done.
<<get-start>>=
library(raadtools)
@

(If there's no message about trouble setting the repository then you
are good to go.)

\section{Simple data read}
\label{sec:simpleread}
There are functions to read data based on a sequence of date-time
values.

<<read-ice, fig.width=4, fig.height=4, out.width='.4\\linewidth'>>=
ice <- readice()
plot(ice)
@

At the simplest level, these functions may be run without setting any
arguments and will return the first available time step for the
default data source. This is handy for becoming familiar with the
kinds of data before getting really specific. Plotting the resulting
\textbf{ice} object provides a familiar polar view. These data are a
single time slice from the daily NSIDC sea ice concentration time
series, here the very first one that is available (from
\Sexpr{getZ(ice)}).

Other read functions include \textbf{reachla}, \textbf{readcurr},
\textbf{readsst}, \textbf{readwind} and \textbf{readtopo}. Each of
these will read a default data set in a similar way to the ice
example, see their respective help pages and explore the index page of
\textbf{raadtools} to see an overview of functionality.

Load up the package help index for an overview of all the help topics
and functions.

<<read-help>>=
library(help = raadtools)
@

Read a simple example from each of the data types mentioned above and plot.
<<read-other,echo=TRUE,output=FALSE>>=

chla <- readchla("2009-10-01")
curr <- readcurr("2012-01-09", magonly = TRUE, lon180 = FALSE)
sst <- readsst(c("2000-01-01", "2009-06-08"))
wind <- readwind()
topo <- readtopo("george_v_terre_adelie", xylim = extent(140, 141.5, -65, -64))

apal <- chl.pal(palette = TRUE)
op <- par(mfcol = c(2, 2))
plot(chla, col = chl.pal(apal$breaks), breaks = apal$breaks,
     main = "Johnson chl-a", legend = FALSE)
plot(curr, main = "ocean surface current magnitude")
plot(sst[[2]], main = "SST")
plot(topo, main = "George V Terre Adelie bathymetry",
     col = topo.colors(68)[-c(40:68)])
par(op)

plot(wind, nr = 2)
@

The read calls above apply slightly different options in each case,
with no arguments at all, with a vector of date-times, \textbf{xylim}
to restrict the spatial extent and \textbf{lon180} to control the
Atlantic vs. Pacific view for global data extending across the
dateline.



The \textbf{ice} object  is a \Sexpr{class(ice)} from the \textbf{raster}
package.
<<explore-ice>>=
ice
@

This object is a \textbf{RasterLayer} which consists of just a single
grid layer for the day listed at the beginning of the NSIDC data
set. The dimensions of the grid are listed, (in the order Y then X)
\Sexpr{dim(ice)[1:2]} and these refer to the number of cells seen
vertically on the page (\Sexpr{nrow(ice)}) and those seen horizontally
(\Sexpr{ncol(ice)}), and then the total number of cells (X * Y).


\subsection{Short digression on R data support used by raadtools}
\label{sec:rasterdetour}
The \textbf{raster} package provides excellent facilities for working
with raster data, including images, surfaces, DEMs and time series
satellite data. From the \textbf{raster} package DESCRIPTION:

\quote{Reading, writing, manipulating, analyzing and modeling of
  gridded spatial data. The package implements basic and high-level
  functions and processing of very large files is supported.}

This package should be consulted for documentation on the use of
Raster objects, and in particular the vignette \textbf{Raster} is a
good place to start. Use the \textbf{library} function's \textbf{help}
argument to get an overview of the available functions.

<<raster-vig,eval=FALSE>>=
library(raster)
## opens an index page to all of the package's functions
library(help = raster)
## opens a PDF document with extended help and examples
vignette("Raster")
@

See the Section~\ref{sec:assumedsupport} for more detail on the design
choices made with \textbf{raster} and the other package dependenices
used by \textbf{raadtools}


\section{Read functions in raadtools}
\label{sec:readrationale}

This section discusses the details of individual read functions and
some of the rationale behind each one. Different data sets are stored
with different native coordinate systems, different pixel and temporal
resolutions, different data units, and cover different spatial and temporal ranges. As well
as all these options, the way data are stored varies tremendously
depending on the provider and the data type. These read functions all
return either a \textbf{Raster} object as defined by the
\textbf{raster} package with as complete and standard metadata as
possible.


Some data sets are inherently multi-layered for a single time step,
such as wind and current vectors and so these both have optional
arguments \textbf{dironly} and \textbf{magonly} to convert the
internal \textbf{U} and \textbf{V} vector components to directions or
magnitudes only. The read operation may be combined with a spatial
crop by using the argument \textbf{xylim} and there are other options
specific for some data sets such as \textbf{lon180} to control the
default orientation (these topics will be discussed in more detail in
later sections, otherwise see the documentation for each function
argument).

\subsection{Read topographic or bathymetric data}
\label{sec:readtopo}

The \textbf{readtopo} (\textbf{readbathy} is a synonym) will return
one of several available data sets
(\Sexpr{as.character(formals(readtopo)[["topo"]])[-1]}). See the help
page for the details and source of each one. As these data are not
dynamic on short time scales they do not provide a \textbf{date}
argument. The \textbf{ibcso} data set is optionally available on a
polar or longitude/latitude grid, controlled by the \textbf{polar}
argument. The Smith and Sandwell data set is returned in Pacific view
on the Mercator projection by default. Use \textbf{lon180 = FALSE} to
return Atlantic view.

<<>>=
geb <- readtopo("gebco_08", xylim = extent(150, 220, -75, -60))

@








\section{Extract spatio-temporal data from read functions}
\label{sec:extractfun}
<<spatio-temporal,eval=FALSE,echo=FALSE>>=

library(raadtools)


     a <- structure(list(x = c(174, 168, 156, 111, 99, 64, 52, 46, -4,
     -15, -30, -38, -47, -62, -87, -127, -145, -160, -161), y = c(-72,
     -39, -50, -58, -35, -38, -48, -60, -48, -35, -37, -51, -68, -72,
     -69, -54, -40, -49, -54)), .Names = c("x", "y"), row.names = c(NA,
     -19L), class = "data.frame")

a$time <-  sort(as.Date("2005-01-01") + sample(c(0, 0, 0, 8, 20, 50), nrow(a), replace = TRUE))

extract(readssh, a)
extract(readssh, a, ssha = TRUE)
extract(readcurr, a, magonly = TRUE)
extract(readice, a)

extract(readchla, time.resolution = "weekly")
extract(readchla, a, time.resolution = "weekly")



##extract(readwind, a)
extract(readwind)
readwind(dironly = TRUE)



a$time <- sort(as.Date("1985-01-01") + sample(c(0, 0, 0, 10, 100, 50), nrow(a), replace = TRUE))


##x <- extract(readsst)
##extract(readsst, a)


 ##extract(readsst)
 ##extract(readsst, time.resolution = "daily")


##extract(readsst, a)


@

<<example-aurora, eval=FALSE,echo=FALSE>>=
data(aurora)

aurora$sst <- extract(readsst, aurora)
aurora$chla <- extract(readchla, aurora)

## nothing for 2013 yet
##aurora$windmag <- extract(readwind, aurora[,1:3], magonly = TRUE)
##aurora$winddir <- extract(readwind, aurora[,1:3], dironly = TRUE)

##aurora$currmag <- extract(readcurr, aurora[,1:3], magonly = TRUE)
##aurora$currdir<- extract(readcurr, aurora[,1:3], dironly = TRUE)

##aurora$ssh <- extract(readssh, aurora[,1:3])
##aurora$ssha <- extract(readssh, aurora[,1:3], ssha = TRUE)

##aurora$ice <- extract(readice, aurora[,1:3])


## note this is slightly different, since there's no point in generalizing out time
##aurora$bathy <- extract(readbathy(), aurora[,1:2])

@



\section{Data sets and the native projection}
\label{sec:nativeproj}

\section{Acknowledgements}
\label{sec:ackk} The \textbf{raadtools} package was built with R
\url{http://www.r-project.org}, Rtools
\url{http://cran.r-project.org/bin/windows/Rtools/}, RStudio
\url{http://www.r-studio.com}, and Git \url{http://git-scm.com}. This
\TeX{} document was built with Sweave using knitr
\url{http://yihui.name/knitr/}.

\nocite{ncdf}
\nocite{R}
\nocite{raster}
\nocite{rgdal}
\nocite{rgeos}
\nocite{Rnews:Pebesma+Bivand:2005}
\nocite{xie2013knitr}
\bibliographystyle{apalike}
\bibliography{raadtools}


\end{document}
